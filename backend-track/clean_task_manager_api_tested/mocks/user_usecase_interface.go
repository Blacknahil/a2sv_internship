// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "clean_task_manager_api_tested/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseInterface is an autogenerated mock type for the UserUsecaseInterface type
type UserUsecaseInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: c, loginRequest
func (_m *UserUsecaseInterface) Login(c context.Context, loginRequest domain.LoginRequest) (domain.LoginResponse, error) {
	ret := _m.Called(c, loginRequest)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.LoginRequest) (domain.LoginResponse, error)); ok {
		return rf(c, loginRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.LoginRequest) domain.LoginResponse); ok {
		r0 = rf(c, loginRequest)
	} else {
		r0 = ret.Get(0).(domain.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.LoginRequest) error); ok {
		r1 = rf(c, loginRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: c, userID
func (_m *UserUsecaseInterface) Promote(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: c, user
func (_m *UserUsecaseInterface) Register(c context.Context, user domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecaseInterface creates a new instance of UserUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecaseInterface {
	mock := &UserUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
