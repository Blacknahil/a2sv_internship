// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "clean_task_manager_api_tested/domain"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// DatabaseInterface is an autogenerated mock type for the DatabaseInterface type
type DatabaseInterface struct {
	mock.Mock
}

// Collection provides a mock function with given fields: name, opts
func (_m *DatabaseInterface) Collection(name string, opts ...*options.CollectionOptions) domain.CollectionInterface {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 domain.CollectionInterface
	if rf, ok := ret.Get(0).(func(string, ...*options.CollectionOptions) domain.CollectionInterface); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CollectionInterface)
		}
	}

	return r0
}

// NewDatabaseInterface creates a new instance of DatabaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseInterface {
	mock := &DatabaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
